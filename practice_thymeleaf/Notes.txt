 return "redirect:/customer"
 -- sau khi thêm sẽ trả lại trang có đường dẫn là customer

   @GetMapping("/{id}/edit")
      public String edit(@PathVariable int id, Model model) {
          model.addAttribute("customer", customerService.findById(id));
          return "/edit";
      }
-- đường dẫn là edit id nào và chuyển sang view edit


  <form action="#" th:action="@{/customer/update}" th:object="${customer}"
          method="POST" novalidate="novalidate">
-- submit form có action là update và method post


-- ModelAndView dung de trả về một model và view
--  modelAndView.addObject dùng để đưa giá trị customerList qua trang html
@GetMapping("")
public ModelAndView index(Model model) {
    ModelAndView modelAndView = new ModelAndView("/index");
    List<Customer> customerList = customerService.findAll();
    modelAndView.addObject("customers", customerList);
    return modelAndView;
}


<html xmlns:th="http://www.thymeleaf.org">
-- dùng để nhúng thư viện thymeleaf

<head th:replace="/layout::head">
-- vị trí layout là có flagment là head trong layout

<footer th:replace="/layout :: footer"></footer>
-- vị trí layout là có flagment là footer trong layout

 <a th:href="@{/customer}">
    Back to customer list
  </a>
-- dẫn tới trang create

<form th:action="@{/customer/save}" th:object="${customer}"
        method="POST" novalidate="novalidate">
-- submit một customer có action là save và method post

 th:field:  là các trường tương ứng trong ô input
